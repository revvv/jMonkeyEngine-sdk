# Properties file for iOS cross-compilation with Avian / OpenJDK

# these normally don't change
ios.platform=ios
ios.arm.flag=armv7
ios.arm64.flag=arm64
ios.i386.flag=i386
ios.x86_64.flag=x86_64

# java build paths
ios.build.classpath.dir=build/ios-classpath
ios.java.classes.dir=${ios.build.classpath.dir}/build
ios.build.classes.dir=${ios.build.classpath.dir}/classpath
ios.build.resources.jar=${ios.build.classpath.dir}/resources.jar
ios.classpath.checkfile=${ios.build.classpath.dir}/.classpath.last
ios.jar.excludes=jme3-desktop-*.jar, \
jme3-blender-*.jar, \
jme3-lwjgl-*.jar, \
jme3-lwjgl-platform-*-natives-*.jar, \
jme3-bullet-native-*.jar, \
jinput.jar, \
lwjgl.jar
ios.classpath.excludes=**/de/lessvoid/nifty/ClipboardAWT.class

# native build paths
ios.build.arch.dir=build/ios-${ios.arch}
ios.build.libs.dir=${ios.build.arch.dir}/libs
ios.build.libs.file=${ios.build.arch.dir}/libs.list
ios.build.resources.o=${ios.build.libs.dir}/resources-jar.o
ios.build.bootimage.o=${ios.build.libs.dir}/bootimage-bin.o
ios.build.codeimage.o=${ios.build.libs.dir}/codeimage-bin.o
ios.images.checkfile=${ios.build.arch.dir}/.binaries.last

# proguard properties -> adapt these if you get missing classes on iOS
ios.proguard.vm.path=${ios.avian.path}/vm.pro
ios.proguard.openjdk.path=${ios.avian.path}/openjdk.pro
ios.proguard.options=-keep public class com.jme3.system.ios.*{public *;} \
-keep public class * extends com.jme3.system.ios.IosHarness{public *;} \
-keep public class * extends com.jme3.app.Application{public *;} \
-keep public class * extends com.jme3.system.JmeSystemDelegate{public *;} \
-keep public class * extends com.jme3.scene.control.*{public *;} \
-keep public class * extends com.jme3.scene.Node{public *;} \
-keep public class * implements com.jme3.renderer.Renderer{public *;} \
-keep public class * implements com.jme3.asset.AssetLoader{public *;} \
-keep public class * implements com.jme3.asset.AssetLocator{public *;} \
-keep public class * implements de.lessvoid.nifty.screen.ScreenController{public *;} \
-keep public class de.lessvoid.nifty.loaderv2.types.** { public *;} \
-keep public class de.lessvoid.nifty.controls.** { public *; } \
-keep public class de.lessvoid.nifty.input.** { public *; } \
-keep public class de.lessvoid.nifty.effects.impl.** { public *;}
-keepclassmembers class com.jme3.audio.plugins.NativeVorbisFile{public *;} \
-keep public class * implements javax.xml.parsers.SAXParserFactory{public *;} \
-keep public class com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl \
-keep public class com.sun.org.apache.xerces.internal.impl.dv.dtd.DTDDVFactoryImpl \
-keep public class sun.nio.fs.MacOSXFileSystemProvider \
-keep public class * extends java.nio.charset.Charset { *; } \
-keep public class java.util.zip.Deflater { *; } \
-keep public class java.io.FileNotFoundException { *; } \
-keep public class java.lang.reflect.Proxy { *; } \
-keep public class java.lang.reflect.InvocationHandler { *; } \
-keep public class java.util.logging.ConsoleHandler \
-keep public class java.util.logging.FileHandler \
-keep public class java.util.logging.SimpleFormatter \
-keep public class java.util.logging.LogManager { *; } \
-keep public class org.xmlpull.mxp1.MXParserFactory { *; }

# native compile
ios.cc.source.dir=ios/src
ios.cc.cache=${ios.build.arch.dir}/.nativebuild.cache
ios.cc.compiler=clang
ios.cc.cflags=-D__IPHONE_OS_VERSION_MIN_REQUIRED=30202 \
-fobjc-abi-version=2 -fobjc-legacy-dispatch \
-I/System/Library/Frameworks/JavaVM.framework/Headers \
-I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks/JavaVM.framework/Headers/

# arm/i386 section, resolved in build file to ios.avian.bootimage-generator etc.
ios.avian.path.arm=${ios.avian.path}/avian-arm
ios.avian.path.arm64=${ios.avian.path}/avian-arm64
ios.avian.path.i386=${ios.avian.path}/avian-i386
ios.avian.path.x86_64=${ios.avian.path}/avian-x86_64
ios.avian.arm.classpath=${ios.avian.path}/classpath
ios.avian.arm64.classpath=${ios.avian.path}/classpath
ios.avian.i386.classpath=${ios.avian.path}/classpath
ios.avian.x86_64.classpath=${ios.avian.path}/classpath

ios.avian.arm.bootimage-generator=${ios.avian.path.arm}/bootimage-generator
ios.avian.arm.generator=${ios.avian.path.arm}/generator
ios.avian.arm.converter=${ios.avian.path.arm}/binaryToObject
ios.avian.arm.binary=${ios.avian.path.arm}/libavian.a
ios.avian.arm64.bootimage-generator=${ios.avian.path.arm64}/bootimage-generator
ios.avian.arm64.generator=${ios.avian.path.arm64}/generator
ios.avian.arm64.converter=${ios.avian.path.arm64}/binaryToObject
ios.avian.arm64.binary=${ios.avian.path.arm64}/libavian.a
ios.avian.i386.bootimage-generator=${ios.avian.path.i386}/bootimage-generator
ios.avian.i386.generator=${ios.avian.path.i386}/generator
ios.avian.i386.converter=${ios.avian.path.i386}/binaryToObject
ios.avian.i386.binary=${ios.avian.path.i386}/libavian.a
ios.avian.x86_64.bootimage-generator=${ios.avian.path.x86_64}/bootimage-generator
ios.avian.x86_64.generator=${ios.avian.path.x86_64}/generator
ios.avian.x86_64.converter=${ios.avian.path.x86_64}/binaryToObject
ios.avian.x86_64.binary=${ios.avian.path.x86_64}/libavian.a

# XCode project
ios.xcode.project.dir=ios/project
